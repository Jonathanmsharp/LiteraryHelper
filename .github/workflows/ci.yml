name: CI Pipeline

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]
  workflow_dispatch:

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  TURBO_REMOTE_CACHE_ENABLED: true
  NODE_ENV: test
  POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/test_db
  REDIS_URL: redis://localhost:6379
  JWT_PUBLIC_KEY: ${{ secrets.JWT_PUBLIC_KEY }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  install:
    name: 📦 Install Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: [18, 20]
      fail-fast: true
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: 🏗️ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 💾 Cache node_modules
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

  lint:
    name: 🧹 Lint
    needs: install
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📥 Restore cached node_modules
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-20-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: 🧹 Run ESLint
        run: pnpm turbo lint

  test:
    name: 🧪 Test
    needs: install
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: [18, 20]
      fail-fast: true
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: 🏗️ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: 📥 Restore cached node_modules
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: 🧪 Run tests with coverage
        run: pnpm turbo test -- --coverage

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: 🏗️ Build
    needs: [lint, test]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📥 Restore cached node_modules
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-20-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: 🔨 Build apps
        run: pnpm turbo build

      - name: 💾 Cache build outputs
        uses: actions/cache/save@v4
        with:
          path: |
            apps/frontend/.next
            packages/*/dist
          key: ${{ runner.os }}-build-${{ github.sha }}

  docker:
    name: 🐳 Docker Build
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📥 Restore build outputs
        uses: actions/cache/restore@v4
        with:
          path: |
            apps/frontend/.next
            packages/*/dist
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: 💾 Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long

      - name: 🔨 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/frontend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Temp fix for https://github.com/docker/build-push-action/issues/252
      - name: 🔄 Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
