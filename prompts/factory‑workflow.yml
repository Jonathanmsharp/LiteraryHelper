## Writing Analysis App: Factory Workflow Prompt List (Updated for Co-Located Backend)

This is the full, sequential, atomic prompt list for Factory.ai or any AI agent to develop the entire application from an empty monorepo repository to a production-deployed, Vercel-hosted application.

###

### Step 3: Scaffold Monorepo with Turborepo & PNPM

Set up a Turborepo using PNPM with the following structure:

* `apps/frontend`
* `packages/types`

Initialize TypeScript project references and root config.

### Step 4: Add Dev Tooling
gi
Set up ESLint, Prettier, and Husky pre-commit hooks to enforce lint and test on commit.

### Step 5: Bootstrap Frontend with Next.js + TS

Inside `apps/frontend`, run `npx create-next-app@latest --ts`. Remove boilerplate pages and commit.

### Step 6: Install Slate.js and Editor Dependencies

Install: `slate`, `slate-react`, `slate-history`, `zustand`, `react-hotkeys-hook`. Add an empty `Editor` component.

### Step 7: Optimize Editor for Performance

Implement Slate editor with `React.memo`, Web Worker offload for syntax parsing, and debounce keystroke events to 500ms.

### Step 8: Add API Directory in Frontend

Inside `apps/frontend`, create the folder `pages/api/` to house serverless API endpoints.

### Step 9: Define Shared Types Package

Create `packages/types` with TypeScript interfaces for `Rule`, `AnalysisRequest`, `AnalysisResult`.

### Step 10: Create PostgreSQL Schema

Add Drizzle ORM or Knex migration scripts to generate tables: `rules`, `analyses`, `users`, `feedback`. Include seed scripts.

### Step 11: Provision Postgres & Redis via Docker

Add `docker-compose.yml` with services for PostgreSQL and Redis. Expose ports 5432 and 6379.

### Step 12: Implement Base Rule Engine

Create a shared class `Rule` with `id`, `severity`, and async `execute(text)` method. Abstract both simple and AI rules from it.

### Step 13: Add SimpleRuleProcessor

Implement three pattern-based rules using regex. Load from `config/rules.json`. Return match ranges and context.

### Step 14: Add AIRuleProcessor

Create processor that accepts rule-specific prompt templates. Calls OpenAI (default GPT-4) using `openai` SDK with fallback provider interface.

### Step 15: Add BullMQ Queue with Redis Backend

Configure Redis-backed BullMQ queue `analysis` with two workers:

* `simpleWorker` – 5 concurrency
* `aiWorker` – 2 concurrency

### Step 16: Implement REST API as Next.js Handlers

Create the following inside `pages/api/`:

* `analyze.ts` → POST request: orchestrates rule execution
* `analysis/[id].ts` → GET request: return current job result
* `rules.ts` → GET request: return all available rules
* `feedback.ts` → POST request: store user feedback

### Step 17: Implement Streaming Progress API (SSE)

Add `pages/api/stream/[id].ts` to stream job progress using Server-Sent Events. Push rule-level analysis as they complete.

### Step 18: Add JWT Authentication Middleware

Authenticate incoming requests using Clerk-generated RS256 JWTs, verified using the JWKS endpoint (process.env.JWT_JWKS_URL). Decode and attach req.user if valid, reject otherwise.

### Step 19: Orchestrate Rule Processing

In `analyze.ts`, run simple rules synchronously and enqueue AI rules. Store partial results and emit progressively.

### Step 20: Add Redis Caching Layer

Wrap analysis with cache-aside strategy: hash input text, TTL 15m, skip queue for repeat submissions.

### Step 21: Create Frontend API Client

Build a `useAnalysis()` React hook that POSTs to `/api/analyze`, subscribes to `/api/stream/[id]`, and updates Zustand state.

### Step 22: Add Real-Time Editor Highlighting

Extend Slate.js rendering to highlight spans returned by each rule using severity colors.

### Step 23: Build Rule Explanation Sidebar

Create UI component that shows matched rule text, reason, and suggestion. Add button to submit user feedback.

### Step 24: Implement Feedback API

In `api/feedback.ts`, write feedback to `analysis_feedback` table. Include userId, ruleId, helpful (bool), notes.

### Step 25: Unit Test Rule Logic

Set up Jest + ts-jest. Write unit tests for all utility functions and individual rule logic to reach ≥90% coverage.

### Step 26: Integration Tests for API

Use Supertest to test API routes: `/api/analyze`, `/api/rules`, `/api/feedback`, error cases, auth, and Redis hits.

### Step 27: End-to-End Tests on Browserbase MCP

Write Playwright scripts that load the app in MCP, type a document, wait for analysis, and validate highlights + sidebar.

### Step 28: Accessibility Testing

Run `axe-core` inside Playwright to check WCAG AA compliance on the full interface. Fail on violations.

### Step 29: Load Testing with Artillery

Simulate 50 concurrent users sending 1k-word documents over 5 minutes. Assert P95 analysis < 3s.

### Step 30: GitHub Actions CI Pipeline

Create `.github/workflows/ci.yml`: install deps, lint, run unit/integration tests, validate build.

### Step 31: Vercel Production Deploy

Ensure production branch (`main`) auto-deploys frontend project (`apps/frontend`) via Vercel settings. Attach all env vars.

### Step 32: Seed Initial Rule Metadata

Add script `scripts/seedRules.ts` that loads `config/rules.json` and AI prompt templates to insert six starter rules.

### Step 33: Environment Configuration

Add `.env.example` with: `OPENAI_API_KEY`, `POSTGRES_URL`, `REDIS_URL`, `JWT_PUBLIC_KEY`. Use `vercel env pull` to populate `.env.local`.

### Step 34: Add Prometheus-Compatible Metrics

Expose `/api/metrics` for queue depth, GPT latency, rule timings. Use `prom-client`. Vercel analytics can scrape.

### Step 35: Add Logging & Error Handling

Log to `pino` in JSON format. Add API-wide error middleware that returns `application/problem+json`.

### Step 36: Security Hardening

Add `helmet` middleware, CSRF checks on feedback endpoint, and token rotation logic using Redis for session tracking.

### Step 37: SLA Dashboard

Add `/admin/dashboard` page that visualizes P95 rule latencies, error rates, and queue size over time.

### Step 38: Documentation

Create `docs/ARCHITECTURE.md`, `docs/API.md`, `docs/RULES.md`. Include prompt templates and example results.

### Step 39: Final Smoke Test

Run full Playwright + Browserbase flow on latest Vercel preview. Verify JWT auth, real-time updates, Redis + DB I/O.

### Step 40: Commit Factory Workflow YAML

Write and commit `prompts/factory-workflow.yml` describing this 40-step sequence and build/test/deploy phases. Include env var names.
